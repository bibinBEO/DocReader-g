
replicaCount: 1

image:
  repository: ghcr.io/your-github-username/docreader # Update this with your actual repo
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

service:
  type: ClusterIP
  port: 8000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  # We will define GPU resources here
  limits:
    nvidia.com/gpu: 1 # Request 1 GPU
  requests:
    nvidia.com/gpu: 1 # Request 1 GPU

nodeSelector: {}
tolerations: []
affinity: {}

# Environment variables for the application
env:
  REDIS_HOST: docreader-redis
  REDIS_PORT: 6379
  REDIS_DB: 0
  POSTGRES_USER: user
  POSTGRES_PASSWORD: password
  POSTGRES_SERVER: docreader-postgres
  POSTGRES_PORT: 5432
  POSTGRES_DB: docreader_db
  DONUT_MODEL_PATH: naver-clova-ix/donut-base-finetuned-docvqa # Donut model path/name
  LAYOUTLMV3_MODEL_PATH: microsoft/layoutlmv3-base # LayoutLMv3 model path/name
  LOG_LEVEL: INFO
  SECRET_KEY: "" # Should be managed via Kubernetes Secret

# Celery Worker specific configurations
celeryWorker:
  replicaCount: 1
  resources:
    limits:
      nvidia.com/gpu: 1 # Request 1 GPU for worker
    requests:
      nvidia.com/gpu: 1 # Request 1 GPU for worker
  env:
    CUDA_VISIBLE_DEVICES: "0" # Pin to GPU 0, or manage via GPU operator

# KEDA ScaledObject for Celery Worker auto-scaling
keda:
  enabled: true
  minReplicas: 0
  maxReplicas: 5
  pollingInterval: 30 # seconds
  cooldownPeriod: 300 # seconds
  queueName: celery # Default Celery queue name
  queueLength: 5 # Scale out when queue length exceeds this
  redis:
    address: docreader-redis:6379
    password: "" # If Redis requires password, use a secret
